/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Meetnow;
import org.jooq.generated.tables.records.BesprechungRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Besprechung extends TableImpl<BesprechungRecord> {

    private static final long serialVersionUID = 1453162187;

    /**
     * The reference instance of <code>meetnow.besprechung</code>
     */
    public static final Besprechung BESPRECHUNG = new Besprechung();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BesprechungRecord> getRecordType() {
        return BesprechungRecord.class;
    }

    /**
     * The column <code>meetnow.besprechung.BesprechungId</code>.
     */
    public final TableField<BesprechungRecord, UInteger> BESPRECHUNGID = createField("BesprechungId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>meetnow.besprechung.RaumId</code>.
     */
    public final TableField<BesprechungRecord, UInteger> RAUMID = createField("RaumId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>meetnow.besprechung.BesitzerId</code>.
     */
    public final TableField<BesprechungRecord, UInteger> BESITZERID = createField("BesitzerId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>meetnow.besprechung.Thema</code>.
     */
    public final TableField<BesprechungRecord, String> THEMA = createField("Thema", org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>meetnow.besprechung.zeitraumStart</code>.
     */
    public final TableField<BesprechungRecord, Timestamp> ZEITRAUMSTART = createField("zeitraumStart", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>meetnow.besprechung.zeitraumEnde</code>.
     */
    public final TableField<BesprechungRecord, Timestamp> ZEITRAUMENDE = createField("zeitraumEnde", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>meetnow.besprechung</code> table reference
     */
    public Besprechung() {
        this(DSL.name("besprechung"), null);
    }

    /**
     * Create an aliased <code>meetnow.besprechung</code> table reference
     */
    public Besprechung(String alias) {
        this(DSL.name(alias), BESPRECHUNG);
    }

    /**
     * Create an aliased <code>meetnow.besprechung</code> table reference
     */
    public Besprechung(Name alias) {
        this(alias, BESPRECHUNG);
    }

    private Besprechung(Name alias, Table<BesprechungRecord> aliased) {
        this(alias, aliased, null);
    }

    private Besprechung(Name alias, Table<BesprechungRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Besprechung(Table<O> child, ForeignKey<O, BesprechungRecord> key) {
        super(child, key, BESPRECHUNG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Meetnow.MEETNOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BESPRECHUNG_BESPRECHUNG_FKINDEX1, Indexes.BESPRECHUNG_BESPRECHUNG_FKINDEX2, Indexes.BESPRECHUNG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BesprechungRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_BESPRECHUNG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BesprechungRecord> getPrimaryKey() {
        return Keys.KEY_BESPRECHUNG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BesprechungRecord>> getKeys() {
        return Arrays.<UniqueKey<BesprechungRecord>>asList(Keys.KEY_BESPRECHUNG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BesprechungRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BesprechungRecord, ?>>asList(Keys.BESPRECHUNG_IBFK_2, Keys.BESPRECHUNG_IBFK_1);
    }

    public Raum raum() {
        return new Raum(this, Keys.BESPRECHUNG_IBFK_2);
    }

    public Benutzer benutzer() {
        return new Benutzer(this, Keys.BESPRECHUNG_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Besprechung as(String alias) {
        return new Besprechung(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Besprechung as(Name alias) {
        return new Besprechung(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Besprechung rename(String name) {
        return new Besprechung(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Besprechung rename(Name name) {
        return new Besprechung(name, null);
    }
}
