/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Meetnow;
import org.jooq.generated.tables.records.TeilnahmeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teilnahme extends TableImpl<TeilnahmeRecord> {

    private static final long serialVersionUID = -1443997347;

    /**
     * The reference instance of <code>meetnow.teilnahme</code>
     */
    public static final Teilnahme TEILNAHME = new Teilnahme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeilnahmeRecord> getRecordType() {
        return TeilnahmeRecord.class;
    }

    /**
     * The column <code>meetnow.teilnahme.BenutzerId</code>.
     */
    public final TableField<TeilnahmeRecord, UInteger> BENUTZERID = createField("BenutzerId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>meetnow.teilnahme.BesprechungId</code>.
     */
    public final TableField<TeilnahmeRecord, UInteger> BESPRECHUNGID = createField("BesprechungId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>meetnow.teilnahme</code> table reference
     */
    public Teilnahme() {
        this(DSL.name("teilnahme"), null);
    }

    /**
     * Create an aliased <code>meetnow.teilnahme</code> table reference
     */
    public Teilnahme(String alias) {
        this(DSL.name(alias), TEILNAHME);
    }

    /**
     * Create an aliased <code>meetnow.teilnahme</code> table reference
     */
    public Teilnahme(Name alias) {
        this(alias, TEILNAHME);
    }

    private Teilnahme(Name alias, Table<TeilnahmeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teilnahme(Name alias, Table<TeilnahmeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Teilnahme(Table<O> child, ForeignKey<O, TeilnahmeRecord> key) {
        super(child, key, TEILNAHME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Meetnow.MEETNOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEILNAHME_BENUTZER_HAS_BESPRECHUNG_FKINDEX1, Indexes.TEILNAHME_BENUTZER_HAS_BESPRECHUNG_FKINDEX2, Indexes.TEILNAHME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeilnahmeRecord> getPrimaryKey() {
        return Keys.KEY_TEILNAHME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeilnahmeRecord>> getKeys() {
        return Arrays.<UniqueKey<TeilnahmeRecord>>asList(Keys.KEY_TEILNAHME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TeilnahmeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeilnahmeRecord, ?>>asList(Keys.TEILNAHME_IBFK_1, Keys.TEILNAHME_IBFK_2);
    }

    public Benutzer benutzer() {
        return new Benutzer(this, Keys.TEILNAHME_IBFK_1);
    }

    public Besprechung besprechung() {
        return new Besprechung(this, Keys.TEILNAHME_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teilnahme as(String alias) {
        return new Teilnahme(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teilnahme as(Name alias) {
        return new Teilnahme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teilnahme rename(String name) {
        return new Teilnahme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teilnahme rename(Name name) {
        return new Teilnahme(name, null);
    }
}
